"""
Module that contains multiple functions used across mia_processes

:Contains:
    :Functions:
        - recupCover
"""

##########################################################################
# Populse_mia - Copyright (C) IRMaGe/CEA, 2018
# Distributed under the terms of the CeCILL license, as published by
# the CEA-CNRS-INRIA. Refer to the LICENSE file or to
# http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.html
# for details.
##########################################################################

from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import Paragraph
from os import listdir, system, makedirs, remove
from os.path import isdir, isfile
from datetime import datetime
from sys import exit
from shutil import copyfile
import readline as readlineComp
import rlcompleter, getpass
import logging # autocomp debug logfile


def recupCover(afile):
    """ Set up the coverage data for the report generated by MRIQC_report brick


    Read the \"afile\" file, split each line according to \":\"
    in a lx2 matrix.
    Then return the matrix ; column 0 = left from the colon ; column 1 = right
    from the colon.

    :param afile: A .txt file. Format == Parameter:Value.
    """

    styleSheet = getSampleStyleSheet()
    matrix = [[0, 0]]

    with open(afile, 'r') as txt:

        for line in txt:

            if bool(not line or line.isspace()):
                continue

            # Remove trailing characters
            line = line.rstrip()
            # Split the string according to the separator ":"
            header, doublePoint, info = line.partition(':')

            if matrix == [[0, 0]]:

                if header == " ":
                    matrix[0][0] = Paragraph("<para align=right>" + header +
                                             "</para>", styleSheet["Normal"])

                else:
                    # Class reportlab.platypus.paragraph.Paragraph
                    # with XML-like markup
                    matrix[0][0] = Paragraph("<para align=right><b>" + header +
                                             "&nbsp&nbsp&nbsp :</b></para>",
                                             styleSheet["BodyText"])
  
                matrix[0][1] = Paragraph("<para align=justify>" + info +
                                         "</para>", styleSheet["Normal"])

            else:

                if (header == " "):
                    temp = [Paragraph("<para align=right>" + header +
                                      "</para>", styleSheet["Normal"]),
                            Paragraph("<para align=justify>" + info +
                                      "</para>", styleSheet["Normal"])]

                else:
                    temp = [Paragraph("<para align=right><b>" + header +
                                      "&nbsp&nbsp&nbsp :</b></para>",
                                      styleSheet["BodyText"]),
                            Paragraph("<para align=justify>" + info +
                                      "</para>", styleSheet["Normal"])]

                matrix.append(temp)

    return matrix
